plugins {
  id 'com.github.hierynomus.license' version '0.16.1'
  id 'com.github.johnrengelman.shadow' version '7.1.2' apply false
  id 'com.jfrog.artifactory' version '4.28.1'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.sonarqube' version '3.3'
}

allprojects {
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'

  ext.versionInSources = version
  ext.buildNumber = System.getProperty("buildNumber")
  // when no buildNumber is provided, then project version must end with '-SNAPSHOT'
  if (ext.buildNumber == null) {
    version = "${version}-SNAPSHOT".toString()
    ext.versionWithoutBuildNumber = version
  } else {
    ext.versionWithoutBuildNumber = version
    version = (version.toString().count('.') == 1 ? "${version}.0.${ext.buildNumber}" : "${version}.${ext.buildNumber}").toString()
  }

  repositories {
    def repository = project.hasProperty('qa') ? 'sonarsource-qa' : 'sonarsource'
    maven {
      url "https://repox.jfrog.io/repox/${repository}"
      // The environment variables ARTIFACTORY_PRIVATE_USERNAME and ARTIFACTORY_PRIVATE_PASSWORD are used on QA env (Jenkins)
      // On local box, please add artifactoryUsername and artifactoryPassword to ~/.gradle/gradle.properties
      def artifactoryUsername = System.env.'ARTIFACTORY_PRIVATE_USERNAME' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
      def artifactoryPassword = System.env.'ARTIFACTORY_PRIVATE_PASSWORD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
      if (artifactoryUsername && artifactoryPassword) {
        credentials {
          username = artifactoryUsername
          password = artifactoryPassword
        }
      }
    }
  }

  artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*,*key*,*KEY*,*signing*')
    contextUrl = System.getenv('ARTIFACTORY_URL')
    publish {
      repository {
        repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
        username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME') ?: project.properties.artifactoryUsername
        password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD') ?: project.properties.artifactoryPaswword
      }
      defaults {
        properties = [
                'build.name': 'sonar-plugin-api',
                'build.number': System.getenv('BUILD_NUMBER'),
                'pr.branch.target': System.getenv('GITHUB_BASE_BRANCH'),
                'pr.number': System.getenv('PULL_REQUEST'),
                'vcs.branch': System.getenv('GITHUB_BRANCH'),
                'vcs.revision': System.getenv('GIT_SHA1'),
                'version': version
        ]
        publications('mavenJava')
        publishPom = true
        publishIvy = false
      }
    }
    clientConfig.info.setBuildName('sonar-plugin-api')
    clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
    // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
    clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")
  }
}

ext {
  release = project.hasProperty('release') && project.getProperty('release')
}

sonarqube {
  properties {
    property 'sonar.projectName', projectTitle
    property 'sonar.projectVersion', "${versionInSources}-SNAPSHOT"
    property 'sonar.buildString', version
  }
}

subprojects {
  apply plugin: 'com.github.hierynomus.license'
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'maven-publish'

  jacoco {
    toolVersion = "0.8.7"
  }

  jacocoTestReport {
    reports {
      xml.required = true
      csv.required = false
      html.required = false
    }
  }

  license {
    header = rootProject.file('HEADER')
    strictCheck true
    encoding = 'UTF-8'
    mapping {
      java = 'SLASHSTAR_STYLE'
      js = 'SLASHSTAR_STYLE'
      ts = 'SLASHSTAR_STYLE'
      tsx = 'SLASHSTAR_STYLE'
      css = 'SLASHSTAR_STYLE'
    }
    includes(['**/*.java', '**/*.js', '**/*.ts', '**/*.tsx', '**/*.css'])
  }

  rootProject.tasks["sonarqube"].dependsOn jacocoTestReport

  dependencyManagement {
    dependencies {
      // bundled plugin list -- keep it alphabetically ordered
      dependency 'commons-io:commons-io:2.11.0'
      dependency 'commons-lang:commons-lang:2.6'
      dependency 'com.google.code.findbugs:jsr305:3.0.2'
      dependency 'com.google.code.gson:gson:2.9.0'
      dependency('com.google.guava:guava:31.1-jre') {
        exclude 'com.google.errorprone:error_prone_annotations'
        exclude 'com.google.guava:listenablefuture'
        exclude 'com.google.j2objc:j2objc-annotations'
        exclude 'org.checkerframework:checker-qual'
        exclude 'org.codehaus.mojo:animal-sniffer-annotations'
      }
      dependency 'com.tngtech.java:junit-dataprovider:1.13.1'
      dependencySet(group: 'ch.qos.logback', version: '1.2.9') {
        entry 'logback-access'
        entry 'logback-classic'
        entry 'logback-core'
      }
      dependency 'javax.servlet:javax.servlet-api:3.1.0'
      dependency 'junit:junit:4.13.2'
      dependency 'org.assertj:assertj-core:3.22.0'
      dependency 'org.junit.jupiter:junit-jupiter-api:5.8.2'
      dependency('org.mockito:mockito-core:4.4.0') {
        exclude 'org.hamcrest:hamcrest-core'
      }
      dependencySet(group: 'org.slf4j', version: '1.7.30') {
        entry 'jcl-over-slf4j'
        entry 'jul-to-slf4j'
        entry 'log4j-over-slf4j'
        entry 'slf4j-api'
      }
    }
  }
}

